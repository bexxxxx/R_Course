# SECTION 1
getwd()
  # get working directory, find out where R is looking
setwd(/Users/RebeccaReilly")
# or command D
ls() lists the contents of this workspace.
rm(<var_name>) allows you to remove objects from the workspace again.

class(some_variable_name) to check var type
as.character() to convert
  character/logical/numeric
is.character() to check if character

numeric_vector <- c(1, 10, 49)
  boolean/character

# names() function to name the elements of a vector
  some_vector <- c("Johnny", "Poker Player")
  names(some_vector) <- c("Name", "Profession")
_______________________________________________________
2.1
# Loading Data
getwd()
setwd("/Users/RR/googledrive/projects/data")
list.files()

state <- read.csv("state.csv")
  # csv files saved as data matrix, also called data frame
dim(state) how many rows and columns
length(state) gives number of elements/columns

names(state) used to access variable names
state$smoke extract entire variable
  dataset$variablename
mean(state$smoke)
high.smoking <- subset(state, smoke < 25)
high.smoking <- subset(state, smoke > 25, select=c("abbr", "smoke"))

state$pres12
#Data frames can hold diff type of var in each column
#Factor object: blend of character and numerical, no "xx"
convert by as.character(state$pres12)
_______________________________________________________
# 2.2 Loading data, object summaries, and dates
setwd()
list.files()
stocks <- read.delim("stocks.txt") # for a tab delimited text file

head(stocks,3) #first 3 rows
tail(stocks,3)
str(stocks)
summary(stocks) #summary of each column

head(stocks$date, 20) #R interpret as factor
stocks$date <- as.Date(stock$date, "%d-%b-%y")
# for help ?strptime

# timeseries
GOOG <- subset(stocks, ticker == "GOOG")
plot(GOOG$date, GOOG$close, type = "l")
_______________________________________________________
# 2.3 if() Statements, Logical Operators, which() function
setwd("")
stocks <- read.delim("stocks.txt")
stocks <- na.omit(stocks)

if (stocks$close[1] > stocks$open[1]) {
  status <- "up"
} else if (stocks$close[1] < stocks$open[1]){
  status <- "down"
} else {
  status <- "flat"
}
status

cond <- stocks$close > stocks$open
status <- ifelse(cond, "up", "flat")
cond <- stocks$close < stocks$open
status <- ifelse(cond, "down", status)
head(status)
table(status)

#logical operators
x<- sample(-1:13, 10)
y<- sample(-1:13, 10)
all(x > 0) # all values of x
any(x == y) # any of their values equal
x > 0 & y > 0 # check if both fist and second cond are true on element wise basis
x > 0 | y > 0 # check one statement or another statement is true on element wise
?xor

#which
fluctuation <- (stocks$high - stocks$low) / stocks$open
head(fluctuation)
big.change <- abs(fluctuation) > 0.25
head(big.change)
which(big.change) # vector of rows that satisfy the condition
_______________________________________________________
#2.4 for() loops and handling missing observations
EX 1
x = c() #empty vector
for (i in 1:10) {
  x <- append(x, i^2)
}
> x
 [1]   1   4   9  16  25  36  49  64  81 100

EX 2
the.tickers <- unique(stocks$ticker)
the.tickers #print to check
lows <- ()
highs <- ()
for (ticker in the.tickers) {
  look.at <- stocks$ticker == ticker
  lows <- append(lows, min(stocks$low[look.at], na.rm=TRUE))
  highs <- append(highs, max(stocks$high[look.at], na.rm=TRUE))
}
#look.at is a boolean vector indicating which observations represent the ticker for the given iteration
the.tickers
lows
highs
sum(is.na(stocks$low))
_______________________________________________________
# 2.5 lists

x <- list(1:5, "okay", TRUE)
# can hold objects of different types

x[[1]] # get specific item
x[["my_height"]] <- 173 # add on to list
# when have named objects can use $ to access them
x$my_height

#create summary for each stock
the.tickers <- unique(stocks$ticker)
stock.summary <- list()
for (ticker in the.tickers) {
  these <- stocks$ticker == ticker
  stock.summary[[ticker]] <- summary(stocks[these, ])
}
stock.summary
stock.summary$GOOG
_______________________________________________________
3.1 Managing Workspace and Variable Casting

ls() #current objects
rm(a) #removes object a
rm(list=ls()) #removes all

x
as.numeric(x)
as.character(x)
x <- as.factor(x)
  # if you have factor variable that looks numeric, convert to character before converting to numeric
as.matrix
as.data.frame
as.list

# unlist
results <- list()
results$gp1 <- c(40, 22, 16)
results$gp2 <- c(25, 15, 9)
results$gp3 <- c(32, 35, 12)
results$gp4 <- c(28, 19, 15)
results

ur <- unlist(results) #vector of unlisted results
mr <- as.matrix(ur, 4, 3, byrow= TRUE)
dr <- as.data.frame(mr)
colnames(dr) <- c("n", "mean", "sd")
_______________________________________________________
3.2 apply()

rev <- read.csv("revenue.csv", header = FALSE)
  # header = F means no column names
head(rev, 3)

apply(rev, 2, sum) #total rev for each company
  # data matrix, dimension to be retained (row = 1, column = 2), function
apply(rev, 1, sum, na.rm=TRUE) #total rev for every day of month

colSums(rev)
rowSums(rev)

# tapply
mk <- read.delim("mariokart.txt")
head(mk, 4)
summary(mk)

tapply(mk$totalPr, mk$cond, sum)
# groups specified by second argument, then function applied to groups
tapply(mk$totalPr, mk[ ,c("cond", "wheels")], mean)

# by
x <- by(mk$totalPr, mk[ ,c("cond", "wheels")], mean)
# creates vector
x[5]
c(x)
_______________________________________________________
3.3 Access or Create Columns in Data Frames, or Simplify a Data Frame using aggregate()

mariokart <- read.delim("mariokart.txt")

closePR <- with(mariokart, totalPR - shipPr) #with mariokart compute total - shipping
head(closePr, 20)

#within: create new columns and merge them with original dataset
mk <- within(mariokart, {
              closePr <- totalPr - shipPr
            })
head(mk)
# closePr was added

mk <- mariokart
aggregate(. ~ wheels + cond, mk, mean)
  # first argument is a formula
    # . means keep all of the variables for the output
    # wheels + cond indicate which variables to aggregate across
  # second argument is a dataframe
  # third argument is how to aggregate the variables
aggregate(totalPr ~ wheels + cond, mk, mean)

tapply(mk$totalPr, mk[ , c("wheels", "cond")], mean)
_______________________________________________________
4.1  Basic Structure of a Function

set.seet(100) # make sure test data is stable so if rerun, get same results
d <- rpois(25, 8)
# sample of 25 from poisson distribution with 8 df

#x represents the data
GetMeanAndSE <- function(x){
  m <- mean(x)
  n <- length(x)
  SE <- sd(x)/sqrt(n)
  return(c(m, SE))
}
GetMeanAndSE(d)
_______________________________________________________
4.2 Returning a List and Providing Default Arguments

GetCI <- function(x, level = 0.95){
  m <- mean(x)
  n <- length(x)
  SE <- sd(x)/sqrt(n)
  upper <- 1 - 1-(level)/2
  ci <- m + c(-1,1)*qt(upper, n-1)*SE
  return(list(mean = m, se = SE, ci = ci))
}
GetCI(d, 0.99) #if want different level

#qt function identifies the 97.5 quantile of T dist. with n-1 df
# level is default confidence level
_______________________________________________________
4.3 Add a Warning or Stop the Function Execution

GetCI <- function(x, level = 0.95){
  if (level <= 0 || level >= 1) {
    stop("The 'level' argument must be >0 and <1")
  }
  if (level < 0.5) {
    warning("confidence levels are often close to 1")
  }

  m <- mean(x)
  n <- length(x)
  SE <- sd(x)/sqrt(n)
  upper <- 1 - 1-(level)/2
  ci <- m + c(-1,1)*qt(upper, n-1)*SE
  return(list(mean = m, se = SE, ci = ci))
}
GetCI(d, 0.99
_______________________________________________________
4.4 Passing Additional Arguments Using an Ellipsis

revenue <- read.csv("revenue.csv", header = FALSE)
head(revenue, 3)

RevSummary <- function(x, ...) {
  if (!is.matrix(x) && !is.data.frame(x)){
    stop("'x' must be a matrix or data fram")
  }

  ellipsis.args <- list(...) # access arguments from ... in function using list

  rev.per.company <- colMeans(x, ...) # want user to pass na remove here
  rev.per.day <- rowMeans(x, ...)

  return(list(rev.per.company = rev.per.company, rev.per.day = rev.per.day))
}

RevSummary(revenue, na.rm = TRUE) #na.rm only passes to those with ...

which(is.na(revenue), arr.ind = TRUE) # array index = T

# ... allows RevSummary function to accept extra Arguments not specified in function declaration
# Then indicate which functions should receive extra arguments

_______________________________________________________
4.5 Make a Returned Result Invisible and Build Recursive Functions

#if output large, use invisible in place of return function
# if output not assigned to object, wont display

annoying <- function(x) {
  invisible(rep(x, 1000))
}
tmp <- annoying(1:3)

# COMMAND ALT  L  to clear console screen

# recursive functions is function that may call itself
LogMe <- function(x) {
  return(ifelse(x > 1, Recall(log(x)), x))
}
LogMe(3.392)
#logme takes log of value until less than 1, if less than 1, it returns the result
#recall automatically calls the function its in
_______________________________________________________
4.6 Custom Functions With apply()

x <- matrix(rpois(1e4, 8), 1e3)

apply(x, 2, mean)
apply(x, 2, function(x) {
  sd(x)/sqrt(length(x))})

# complex funct in third argument of apply()
GetCI <- function(x, level = 0.95){
    if (level <= 0 || level >= 1) {
      stop("The 'level' argument must be >0 and <1")
    }
    if (level < 0.5) {
      warning("confidence levels are often close to 1")
    }

    m <- mean(x)
    n <- length(x)
    SE <- sd(x)/sqrt(n)
    upper <- 1 - 1-(level)/2
    ci <- m + c(-1,1)*qt(upper, n-1)*SE
    return(list(mean = m, se = SE, ci = ci))
  }

tmp <- apply(x, 2, GetCI)
is.list(tmp)
  # output would be TRUE
tmp[[1]]

#apply function adapts its output to accommodate complex outputs
#since GetCI returns a list, the best way to view many outputs of that function is to contain them in super list
